{{- if .Values.orchestra.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "hume-helm.fullname" . }}-orchestra
  labels:
    {{- include "hume.labels" . | nindent 4 }}
  {{- with .Values.annotations }}
  annotations:
  {{ toYaml . | indent 4 }}
  {{- end }}
spec:
  serviceName: "orchestra"
  replicas: {{ .Values.orchestra.deployment.replicas | int | default 1 }}
  selector:
    matchLabels:
      app: {{ include "hume-helm.fullname" . }}-orchestra
  template:
    metadata:
      labels:
        app: {{ include "hume-helm.fullname" . }}-orchestra
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "hume-helm.serviceAccountName" . }}
      {{ end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ include "hume-helm.fullname" . }}-orchestra
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.humeCoreBaseRepository }}{{ .Values.orchestra.image.name }}:{{ include "orchestraImageTag" . }}"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          ports:
            - name: orchestra
              containerPort: {{ .Values.orchestra.port }}
              protocol: TCP
            - name: metrics
              containerPort: 7001
              protocol: TCP
            {{- if .Values.orchestra.webhooks.enabled }}
            - name: webhook
              containerPort: {{ .Values.orchestra.webhooks.port }}
              protocol: TCP
            {{- end }}
            {{- with .Values.orchestra.additionalPorts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          startupProbe:
            httpGet:
              path: {{ .Values.orchestra.startupProbe.path }}
              port: {{ .Values.orchestra.startupProbe.port }}
            failureThreshold: {{ .Values.orchestra.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.orchestra.startupProbe.periodSeconds }}
          livenessProbe:
            httpGet:
              path: {{ .Values.orchestra.livenessProbe.path }}
              port: {{ .Values.orchestra.livenessProbe.port }}
            failureThreshold: {{ .Values.orchestra.livenessProbe.failureThreshold }}
            periodSeconds: {{ .Values.orchestra.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.orchestra.livenessProbe.timeoutSeconds }}
          readinessProbe:
            httpGet:
              path: {{ .Values.orchestra.readinessProbe.path }}
              port: {{ .Values.orchestra.readinessProbe.port }}
            failureThreshold: {{ .Values.orchestra.readinessProbe.failureThreshold }}
            periodSeconds: {{ .Values.orchestra.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.orchestra.readinessProbe.timeoutSeconds }}
          envFrom:
            - configMapRef:
                name: {{ include "hume-helm.fullname" . }}-orchestra-configmap
            {{- if .Values.orchestra.extraSecrets }}
            {{- range .Values.orchestra.extraSecrets }}
            - secretRef:
                name: {{ . }}
            {{- end }}
            {{- end }}
          env:
            {{- if .Values.orchestra.cluster.enabled }}
            - name: orchestra.cluster.enabled
              value: "true"
            - name: orchestra.cluster.nodes.active.number
              value: {{ .Values.orchestra.deployment.replicas | int | default 1 | quote}}
            - name: orchestra.cluster.node.id
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- end }}
            {{- with .Values.orchestra.env }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- if not .Values.postgresqlOrchestra.enabled}}
            - name: spring.datasource.password
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.customOrchestraPostgresql.global.postgresql.secretRef.existingSecret }}
                  key: {{ .Values.customOrchestraPostgresql.global.postgresql.secretRef.passwordSecretKey }}
            {{- end }}
          resources:
            {{- toYaml .Values.orchestra.resources | nindent 12 }}
          volumeMounts:
            {{- with .Values.orchestra.volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      volumes:
        {{- with .Values.orchestra.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
  volumeClaimTemplates:
    {{- with .Values.orchestra.volumeClaimTemplates }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
{{- end }}
