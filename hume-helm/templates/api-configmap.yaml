---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "hume-helm.fullname" . }}-api-configmap
  labels:
  {{- include "hume.labels" . | nindent 4 }}
  {{- with .Values.annotations }}
  annotations:
  {{ toYaml . | indent 4 }}
  {{- end }}
data:
  management.server.port: "7001"
  {{- if .Values.postgresqlCore.enabled }}
  spring.datasource.url: "jdbc:postgresql://postgresql-core:{{ .Values.postgresqlCore.global.postgresql.auth.servicePort }}/{{ .Values.postgresqlCore.global.postgresql.auth.database }}"
  spring.datasource.username: {{ .Values.postgresqlCore.global.postgresql.auth.username }}
  spring.datasource.password: {{ .Values.postgresqlCore.global.postgresql.auth.password }}
  {{ else }}
  spring.datasource.url: "jdbc:postgresql://{{ .Values.customApiPostgresql.global.postgresql.auth.hostname }}:{{ .Values.customApiPostgresql.global.postgresql.auth.servicePort }}/{{ .Values.customApiPostgresql.global.postgresql.auth.database }}"
  spring.datasource.username: {{ .Values.customApiPostgresql.global.postgresql.auth.username }}
  {{- end }}
  hume.orchestra.uri: "http://{{ include "hume-helm.fullname" . }}-orchestra:{{ .Values.orchestra.port }}"
  hume.driver.neo4j.transaction.timeout: "{{ .Values.api.neo4j.driver.transaction.timeout }}"
  {{- if .Values.api.features.mde }}
  hume.feature.mde.enabled: "true"
  {{- end }}
  {{- if .Values.eventstore.enabled }}
  hume.eventstore.hostname: "{{ .Values.eventstore.app.name }}"
  hume.eventstore.port: "{{ .Values.eventstore.port }}"
  hume.eventstore.username: "{{ .Values.eventstore.username }}"
  hume.eventstore.password: "{{ .Values.eventstore.password }}"
  {{- end }}
  {{- if .Values.keycloak.useKeycloak.enabled }}
  hume.security.provider: 'keycloak'
  keycloak.realm: {{ .Values.keycloak.realm }}
  keycloak.resource: {{ .Values.keycloak.client }}
  keycloak.public-client: 'true'
  keycloak.principal-attribute: 'preferred_username'
  keycloak.use-resource-role-mappings: 'true'
  keycloak.enabled: 'true'
  {{- if not .Values.keycloak.internal.enabled }}
  keycloak.auth-server-url: "{{ .Values.ingress.protocol.scheme }}://{{ .Values.keycloak.customKeycloak.customKeycloakEndpoint }}"
  {{- else if and .Values.keycloak.internal.enabled .Values.ingress.enabled }}
  keycloak.auth-server-url: "{{ .Values.ingress.protocol.scheme }}://{{ .Values.keycloak.app.name }}{{ .Values.ingress.appNameSuffix }}.{{ required "Missing required baseDomain parameter!" .Values.baseDomain }}"
  {{- else }}
  keycloak.auth-server-url: "http://localhost:{{ .Values.keycloak.service.ports.http }}"
  {{- end }}
  {{- end }}
  {{- if .Values.alerting.enabled }}
  hume.feature.alerts.enabled: 'true'
  hume.feature.collections.enabled: true'
  hume.alerting.uri: {{ .Values.alerting.uri }}
  alerting.client.enabled: 'true'
  {{- end }}
  {{- if .Values.api.admin.auto_create }}
  com.hume.core.admin.setup.step.admin_creation.auto: 'true'
  com.hume.core.admin.setup.step.admin_creation.username: {{ .Values.api.admin.username }}
  com.hume.core.admin.setup.step.admin_creation.name: {{ .Values.api.admin.username }}
  com.hume.core.admin.setup.step.admin_creation.password: {{ .Values.api.admin.password }}
  {{- end }}
  # Remote API Key config
  {{- if .Values.api.remoteApi.enabled }}
  hume.api.enabled: "{{ .Values.api.remoteApi.enabled }}"
  {{- if .Values.api.remoteApi.initialKey.create }}
  hume.api.initial-key.create: "{{ .Values.api.remoteApi.initialKey.create }}"
  {{- if not .Values.api.remoteApi.initialKey.existingSecret }}
  hume.api.initial-key.name: {{ .Values.api.remoteApi.initialKey.name }}
  hume.api.initial-key.token: {{ .Values.api.remoteApi.initialKey.token }}
  hume.api.initial-key.roles: {{ .Values.api.remoteApi.initialKey.roles }}
  {{- end }}
  {{- end }}
  {{- end }}
  # Alerting
  {{- if .Values.alerting.enabled }}
  alerting.client.enabled: 'true'
  {{- end }}
  {{- if .Values.api.metrics.enabled }}
  management.endpoints.web.exposure.include: "health,prometheus,info"
  {{- end }}
---