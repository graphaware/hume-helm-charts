# Default values for hume-helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

### Global parameters ###
baseDomain: ""
imagePullSecrets:
   - name: graphaware-docker-creds
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
deploymentStrategy:
  type: RollingUpdate
nodeSelector: {}
tolerations: []
affinity: {}
annotations: {}
podAnnotations: {}

# Used to have predictable service name to configure networking between API and Postgres Core
postgresql-core-reference: &postgresql_core_reference postgresql-core
postgresql-orchestra-reference: &postgresql_orchestra_reference postgresql-orchestra
repositoryBase: "docker.graphaware.com/internal/"
imagePullPolicy: "Always"
tiers:
  discover:
    name: "hume-discover"

### Exposure paratemters
ingress:
  enabled: false
  apiVersion: networking.k8s.io/v1
  annotations: {}
  ingressClassName: ""
  pathType: Prefix
  protocol:
    scheme: https
  path: "/"

### Common parameters
nameOverride: ""
fullnameOverride: "hume"

### Application based parameters ###
keycloak:
  # see https://github.com/bitnami/charts/tree/master/bitnami/keycloak
  # for subchart settings
  enabled: false
  realm: hume
  client: "hume-web"
  fullnameOverride: hume-keycloak
  service:
    type: ClusterIP
    ports:
      http: 8180
  app:
    name: hume-keycloak
web:
  image:
    name: "hume-web"
    tag: ""
  port: 8081
  service:
    type: ClusterIP
  deployment:
    replicas: ""
  app:
    name: hume-web
api:
  image:
    name: "hume-api"
    tag: ""
  port: 8080  
  deployment:
    replicas: ""
  service:
    type: NodePort
  app:
    name: hume-api  
  admin:
    auto_create: true
    # check neo4j random password script
    username: admin@hume.k8s
    password: password
  neo4j:
    driver:
      transaction:
        timeout: 90000
  probes:
    livenessProbe:
      inititalDelaySeconds: 0
      periodSeconds: 10
      failureThreshold: 3
    startupProbe:
      # use a startup probe so the API has the time to perform db migrations before the livenessProbe kicks in.
      # startup probe will fail after (failureTreshold * periodSeconds )
      # by default we use a large value of 300 seconds for slow environments
      initialDelaySeconds: 30
      periodSeconds: 5
      failureThreshold: 60
neo4j:
  enabled: true
  services:
    neo4j:
      enabled: false
  fullnameOverride: "hume-neo4j"
  neo4j:
    name: neo4j
    enabled: true
    acceptLicenseAgreement: "yes"
    password: password
    edition: enterprise
  env:
    NEO4J_PLUGINS: '["apoc"]'
  config:
    dbms.security.procedures.unrestricted: "apoc.*"
  volumes:
    data:
      mode: "defaultStorageClass"
orchestra:
  enabled: true
  image:
    name: "hume-orchestra"
    tag: ""
  port: 8100
  deployment:
    replicas: ""
  service:
    type: ClusterIP
  persistence:
    enabled: true
    accessModes:
      - ReadWriteOnce
    mountPath: "/data"
    subPath: ""
    size: 1Gi
    annotations: {}
    selector: {}
  startupProbe:
    failureThreshold: 20
    periodSeconds: 7
    path: /actuator/metrics
    port: metrics
  livenessProbe:
    failureThreshold: 10
    timeoutSeconds: 10
    periodSeconds: 5
    path: /actuator/metrics
    port: metrics
  readinessProbe:
    failureThreshold: 10
    timeoutSeconds: 10
    periodSeconds: 5
    path: /actuator/metrics
    port: metrics
# postgres:
#   enabled: true
alerting:
  enabled: false
  uri: "http://hume-alerting-development"
  client:
    enabled: true
hume-alerting:
  internal-kafka:
    enabled: false
  kafka:
    host: pkc-e8mp5.eu-west-1.aws.confluent.cloud
  postgresqlAlertingOperator:
    global:
      postgresqlPassword: ""
  postgresqlAlertingControllerperator:
    global:
      postgresqlPassword: ""
postgresqlCore:
  global:
    postgresql:
      auth:
        database: hume
        username: hume
        password: hume
        servicePort: 5432
  fullnameOverride: *postgresql_core_reference
postgresqlOrchestra:
  enabled: true
  global:
    postgresql:
      auth:
        database: orchestra
        username: orchestra
        password: pgsqls3cr3t
        servicePort: 5432
  fullnameOverride: *postgresql_orchestra_reference
### RBAC parameters
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

### Security parameters
podSecurityContext:
  fsGroup: 2000
securityContext:
  capabilities:
    drop:
    - ALL
  runAsNonRoot: true