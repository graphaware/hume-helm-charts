# Default values for hume-helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

### Global parameters ###
baseDomain: ""
imagePullSecrets:
   - name: graphaware-docker-creds
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
deploymentStrategy:
  type: RollingUpdate
nodeSelector: {}
tolerations: []
affinity: {}
annotations: {}
podAnnotations: {}

# Used to have predictable service name to configure networking between API and Postgres Core
postgresql-core-reference: &postgresql_core_reference postgresql-core
repositoryBase: "docker.graphaware.com/internal/"
imagePullPolicy: "Always"
tiers:
  discover:
    name: "hume-discover"

### Exposure paratemters
ingress:
  enabled: false
  apiVersion: networking.k8s.io/v1
  annotations: {}
  ingressClassName: ""
  pathType: Prefix
  protocol:
    scheme: https
  path: "/"

### Common parameters
nameOverride: ""
fullnameOverride: "hume"

### Application based parameters ###
keycloak:
  enabled: false
  realm: hume
  client: "hume-web"
  fullnameOverride: hume-keycloak
  service:
    type: ClusterIP
  app:
    name: hume-keycloak
  proxyAddressForwarding: true
web:
  image:
    name: "hume-web"
  port: 8081
  service:
    type: ClusterIP
  replicaCount: 1
  app:
    name: hume-web
api:
  image:
    name: "hume-api"
  port: 8080  
  replicaCount: 1
  service:
    type: NodePort
  app:
    name: hume-api  
  admin:
    auto_create: true
    # neo4j random password
    username: admin@hume.k8s
    password: password
  licence:
    auto_install: false
    key: ""
neo4j:
  nameOverride: "neo4j"
  namePrefix: "hume-"
  neo4j:
    name: neo4j
    enabled: true
    fullnameOverride: "neo4j"
    fullnamePrefix: "hume-"
    acceptLicenseAgreement: "yes"
    password: password
  volumes:
    data:
      mode: "defaultStorageClass"
orchestra:
  enabled: true
  image:
    name: "hume-orchestra"
  port: 8100
  service:
    type: ClusterIP
  persistence:
    enabled: false
    accessModes:
      - ReadWriteOnce
    mountPath: "/data"
    subPath: ""
    size: 100Mi
    annotations: {}
    selector: {}
  startupProbe:
    failureThreshold: 20
    periodSeconds: 7
    path: /actuator/metrics
    port: metrics
  livenessProbe:
    failureThreshold: 10
    timeoutSeconds: 10
    periodSeconds: 5
    path: /actuator/metrics
    port: metrics
  readinessProbe:
    failureThreshold: 10
    timeoutSeconds: 10
    periodSeconds: 5
    path: /actuator/metrics
    port: metrics
postgres:
  enabled: true
alerting:
  enabled: false
  uri: "http://hume-alerting-development"
  client:
    enabled: true
hume-alerting:
  internal-kafka:
    enabled: false
  kafka:
    host: pkc-e8mp5.eu-west-1.aws.confluent.cloud
  postgresqlAlertingOperator:
    global:
      postgresqlPassword: ""
  postgresqlAlertingControllerperator:
    global:
      postgresqlPassword: ""
postgresqlCore:
  global:
    postgresql:
      auth:
        database: hume
        username: hume
        password: hume
        servicePort: 5432
  fullnameOverride: *postgresql_core_reference

### RBAC parameters
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

### Security parameters
podSecurityContext:
  fsGroup: 2000
securityContext:
  capabilities:
    drop:
    - ALL
  runAsNonRoot: true