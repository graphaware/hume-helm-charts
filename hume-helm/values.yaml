# Default values for hume-helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

### Tags for dependencies

### Global parameters ###
baseDomain: ""
imagePullSecrets:
   - name: graphaware-docker-creds
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
deploymentStrategy:
  type: RollingUpdate
nodeSelector: {}
tolerations: []
affinity: {}
annotations: {}
podAnnotations: {}

# Used to have predictable service name to configure networking between services and postgres instances
postgresql-core-reference: &postgresql_core_reference postgresql-core
postgresql-orchestra-reference: &postgresql_orchestra_reference postgresql-orchestra
postgresql-eventstore-reference: &postgresql_eventstore_reference postgresql-eventstore
postgresql-media-reference: &postgresql_media_reference postgresql-media


humeCoreBaseRepository: "docker.graphaware.com/hume-core/"
imagePullPolicy: "Always"
tiers:
  discover:
    name: "hume-discover"

### Exposure paratemters
ingress:
  enabled: false
  apiVersion: networking.k8s.io/v1
  annotations: {}
  ingressClassName: ""
  pathType: Prefix
  protocol:
    scheme: https
  path: "/"

### Common parameters
nameOverride: ""
fullnameOverride: "hume"

### Application based parameters ###
keycloak:
  # See https://github.com/bitnami/charts/tree/master/bitnami/keycloak for subchart settings
  # Whether to use Keycloak
  useKeycloak:
    enabled: false
  # When enabled the chart will install internal Bitnami Keycloak, when false means use custom Keycloak endpoint
  internal:
    enabled: false
  customKeycloak:
    customKeycloakEndpoint: ""
  realm: ""
  client: ""
  fullnameOverride: hume-keycloak
  service:
    type: ClusterIP
    ports:
      http: 8180
  app:
    name: hume-keycloak
web:
  image:
    name: "hume-web"
    tag: ""
  port: 8081
  service:
    type: ClusterIP
  extraSecrets: []
  deployment:
    replicas: ""
  app:
    name: hume-web
  # Additional environment variables for hume-core/web
  # Can also override existing environment variables
  env: []
    # - name: KEYCLOAK_URL
    #   value: https://myexistingkeycloak.com
api:
  image:
    name: "hume-api"
    tag: ""
  port: 8080
  extraSecrets: []
  deployment:
    replicas: ""
  service:
    type: NodePort
  app:
    name: hume-api  
  admin:
    auto_create: true
    # check neo4j random password script
    username: admin@hume.k8s
    password: password
  neo4j:
    driver:
      transaction:
        timeout: 90000
  features:
    # Separately licensed module. Please make sure you have the appropriate licence before enabling this feature.
    mde: false
  remoteApi:
    enabled: false
  media:
    enabled: false
    uri: ""
    # https://documentation.hume.graphaware.com/operations-manual/hume-api/api.html
    initialKey:
      create: false
      name: initial-api-key
      token: my-super-secret-token
      # roles should be a comma spearated list of existing Hume roles
      roles: USER
  # Additional environment variables for hume-core/api
  # Can also override existing environment variables
  env: []
    # - name: spring.datasource.username
    #   valueFrom:
    #     secretKeyRef:
    #       key: db-username
    #       name: core-postgres-db-username
  # volumes templates configs to be set on the deployment
  volumes: []
  # volumeMounts config that will be set on the container
  volumeMounts: []
  probes:
    livenessProbe:
      inititalDelaySeconds: 0
      periodSeconds: 10
      failureThreshold: 3
    startupProbe:
      # use a startup probe so the API has the time to perform db migrations before the livenessProbe kicks in.
      # startup probe will fail after (failureTreshold * periodSeconds )
      # by default we use a large value of 300 seconds for slow environments
      initialDelaySeconds: 30
      periodSeconds: 5
      failureThreshold: 60
  metrics:
    enabled: false
    service:
      type: ClusterIP
      port: 7001
      targetPort: metrics
    serviceMonitor:
      enabled: false
      jobLabel: ""
      port: metrics
      path: '/actuator/prometheus'
      interval: 30s
      labels: {}
media:
  enabled: false
  image:
    name: "hume-media"
    tag: ""
  port: 8008
  deployment:
    replicas: ""
  service:
    type: NodePort
  app:
    name: hume-media
    uri: http://hume-media:8008
  resources:
    requests:
      cpu: "500m"
      memory: "2048Mi"
  username: hume
  password: megaSecretPwd
  env: [ ]
  volumes: [ ]
  volumeMounts: [ ]
  security:
    apiKey: 'hms_api_key'
    native:
      jwt:
        signingKey: ""
  storage:
    local:
      enabled: false
      uploadPath: "/tmp/upload"
      readyPath: "/tmp/upload"
    s3:
      enabled: false
      uploadPath: ""
      readyPath: ""
    minio:
      enabled: false
      uploadPath: ""
      readyPath: ""
      accessKey: ""
      accessSecret: ""
  
    file:
      initial_status: "READY"
      max_size: "200MB"
  metrics:
    enabled: false
    service:
      type: ClusterIP
      port: 7001
      targetPort: metrics
    serviceMonitor:
      enabled: false
      jobLabel: ""
      port: metrics
      path: '/actuator/prometheus'
      interval: 30s
      labels: {}

  probes:
    livenessProbe:
      initialDelaySeconds: 0
      periodSeconds: 10
      failureThreshold: 3
      path: /actuator/prometheus
      port: metrics
    startupProbe:
      initialDelaySeconds: 30
      periodSeconds: 5
      failureThreshold: 60
      path: /actuator/prometheus
      port: metrics
    readinessProbe:
      failureThreshold: 10
      timeoutSeconds: 10
      periodSeconds: 5
      path: /actuator/prometheus
      port: metrics



eventstore:
  enabled: false
  extraSecrets: []
  image:
    name: "hume-eventstore"
    tag: ""
  port: 9090
  deployment:
    replicas: ""
  service:
    type: NodePort
  app:
    name: hume-eventstore
  username: hume
  password: megaSecretPwd
  # Additional environment variables for hume-eventstore/eventstore
  # Can also override existing environment variables
  env: []
    # - name: spring.datasource.username
    #   valueFrom:
    #     secretKeyRef:
    #       key: db-username
    #       name: eventstore-postgres-db-username
  # volumes templates configs to be set on the deployment
  volumes: []
  # volumeMounts config that will be set on the container
  volumeMounts: []
  probes:
    livenessProbe:
      inititalDelaySeconds: 0
      periodSeconds: 10
      failureThreshold: 3
    startupProbe:
      initialDelaySeconds: 30
      periodSeconds: 5
      failureThreshold: 60
  metrics:
    enabled: false
    service:
      type: ClusterIP
      port: 7001
      targetPort: metrics
    serviceMonitor:
      enabled: false
      jobLabel: ""
      port: metrics
      path: '/actuator/prometheus'
      interval: 30s
      labels: {}
      basicAuth:
        enabled: false
        secretName: eventstore-credentials-secret
orchestra:
  enabled: true
  cluster:
    enabled: false
    service:
      type: ClusterIP
  image:
    name: "hume-orchestra"
    tag: ""
  port: 8100
  webhooks:
    enabled: true
    port: 8101
    service:
      type: ClusterIP
  extraSecrets: []
  deployment:
    replicas: ""
  service:
    type: ClusterIP
  persistence:
    enabled: true
    accessModes:
      - ReadWriteOnce
    mountPath: "/data"
    subPath: ""
    size: 1Gi
    annotations: {}
    selector: {}
  # Additional environment variables for hume-core/orchestra
  # Can also override existing environment variables
    # - name: spring.datasource.username
    #   valueFrom:
    #     secretKeyRef:
    #       key: db-username
    #       name: orchestra-postgres-db-username
  env: []
  #
  # Init Containers
  # Example
    # - name: init-s3-download
    #   image: amazon/aws-cli:latest
    #   command: ["/bin/sh", "-c"]
    #   args:
    #     - |
    #       aws s3 cp s3://bucket/my-plugin.jar /plugins
    #   volumeMounts:
    #     - name: plugins
    #       mountPath: /plugins
  initContainers: []
  # volumeMounts config that will be set on the container
    # - name: plugins
    #   mountPath: /plugins
  volumeMounts: []
  # volumes config to be set on the orchestra pod
  volumes: []
  # volumes claim templates configs to be set on the deployment
  volumeClaimTemplates: []
  additionalPorts: []
  startupProbe:
    failureThreshold: 20
    periodSeconds: 7
    path: /actuator/metrics
    port: metrics
  livenessProbe:
    failureThreshold: 10
    timeoutSeconds: 10
    periodSeconds: 5
    path: /actuator/metrics
    port: metrics
  readinessProbe:
    failureThreshold: 10
    timeoutSeconds: 10
    periodSeconds: 5
    path: /actuator/metrics
    port: metrics
  metrics:
    enabled: false
    service:
      type: ClusterIP
      port: 7001
      targetPort: metrics
    serviceMonitor:
      enabled: false
      jobLabel: ""
      port: metrics
      path: '/actuator/prometheus'
      interval: 30s
      labels: {}
alerting:
  # Separately licensed module. Please make sure you have the appropriate licence before enabling this module.
  enabled: false
  uri: "http://hume-alerting-development"
hume-alerting:
  internal-kafka:
    enabled: true
  postgresqlAlertingOperator:
    global:
      postgresqlPassword: ""
  postgresqlAlertingControllerperator:
    global:
      postgresqlPassword: ""
postgresqlCore:
  # When enabled the chart will install internal Bitnami PostgreSQL chart otherwise it is using custom DB endpoint
  enabled: true
  global:
    postgresql:
      auth:
        database: hume
        username: hume
        password: hume
        servicePort: 5432
  fullnameOverride: *postgresql_core_reference
customApiPostgresql:
  global:
    postgresql:
      auth:
        database: ""
        hostname: ""
        username: ""
        servicePort: 5432
      secretRef:
        existingSecret: ""
        passwordSecretKey: ""
# When enabled the chart will install internal Bitnami PostgreSQL chart otherwise it is using custom DB endpoint
postgresqlOrchestra:
  enabled: true
  global:
    postgresql:
      auth:
        database: orchestra
        username: orchestra
        password: pgsqls3cr3t
        servicePort: 5432
  fullnameOverride: *postgresql_orchestra_reference
customOrchestraPostgresql:
  global:
    postgresql:
      auth:
        database: ""
        hostname: ""
        username: ""
        servicePort: 5432
      secretRef:
        existingSecret: ""
        passwordSecretKey: ""
# When enabled the chart will install internal Bitnami PostgreSQL chart otherwise is using custom DB endpoint
postgresqlEventStore:
  enabled: true
  global:
    postgresql:
      auth:
        database: eventstore
        username: eventstore
        password: eventstore
        servicePort: 5432
  fullnameOverride: *postgresql_eventstore_reference
customEventstorePostgresql:
  global:
    postgresql:
      auth:
        database: ""
        hostname: ""
        username: ""
        servicePort: 5432
      secretRef:
        existingSecret: ""
        passwordSecretKey: ""

postgresqlMedia:
  enabled: true
  global:
    postgresql:
      auth:
        database: media
        username: media
        password: media
        servicePort: 5432
  fullnameOverride: *postgresql_media_reference
customMediaPostgresql:
  global:
    postgresql:
      auth:
        database: ""
        hostname: ""
        username: ""
        servicePort: 5432
      secretRef:
        existingSecret: ""
        passwordSecretKey: ""
### RBAC parameters
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

### Security parameters
podSecurityContext:
  fsGroup: 2000
securityContext:
  capabilities:
    drop:
    - ALL
  runAsNonRoot: true
  runAsUser: 1001
